from pyspark.sql import SparkSession
from pyspark.sql.functions import udf, split
from pyspark.sql.types import DoubleType
from pyspark.ml.feature import NGram

# Create a Spark session
spark = SparkSession.builder.appName("example").getOrCreate()

# Read the datasets
data1_clean = spark.read.format("csv").options(header='true', inferSchema='true').load("path/to/data1.csv")
data2_clean = spark.read.format("csv").options(header='true', inferSchema='true').load("path/to/data2.csv")

# Define the similarity threshold
similarity_threshold = 0.8

# Create an NGram transformer
ngram = NGram(n=3, inputCol="b_clean", outputCol="b_ngrams")

# Transform the data1_clean dataset
data1_ngrams = ngram.transform(data1_clean)

# Create an NGram transformer
ngram = NGram(n=3, inputCol="c_clean", outputCol="c_ngrams")

# Transform the data2_clean dataset
data2_ngrams = ngram.transform(data2_clean)

# Split the ngrams column into an array of strings
data1_ngrams = data1_ngrams.withColumn("b_ngrams", split(data1_ngrams["b_ngrams"], " "))
data2_ngrams = data2_ngrams.withColumn("c_ngrams", split(data2_ngrams["c_ngrams"], " "))

# Join the two datasets on the matching column and calculate similarity
matched_data = data1_ngrams.join(data2_ngrams, data1_ngrams["b_ngrams"] == data2_ngrams["c_ngrams"], "inner")

# Create a function to calculate the Jaccard similarity
def jaccard_similarity(set1, set2):
    set1 = set(set1)
    set2 = set(set2)
    return len(set1.intersection(set2)) / len(set1.union(set2))

# Register the function as a UDF
jaccard_similarity_udf = udf(jaccard_similarity, DoubleType())

# Calculate the Jaccard similarity
matched_data = matched_data.withColumn("similarity", jaccard_similarity_udf(matched_data["b_ngrams"], matched_data["c_ngrams"]))

# Filter out null values from the matched data
matched_data = matched_data.filter("b_ngrams is not null and c_ngrams is not null")

# Filter out data with similarity below the threshold
matched_data = matched_data.filter(matched_data["similarity"] > similarity_threshold)

# Show the matched data
matched_data.show()
